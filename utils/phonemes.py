from typing import List, cast
from phonemizer import phonemize
from phonemizer.separator import Separator

# --- Vocabulary Definition ---
# A comprehensive set of IPA phonemes for American English, based on espeak-ng.
# This vocabulary is fixed to ensure model compatibility across different runs.
# Any phoneme generated by espeak-ng but not in this list will be mapped to UNK.
IPA_PHONEMES = sorted(list(set([
    'ə', 'b', 'd', 'eɪ', 'f', 'g', 'h', 'i', 'dʒ', 'k', 'l', 'm', 'n', 'oʊ',
    'p', 'ɹ', 's', 't', 'tʃ', 'u', 'v', 'w', 'z', 'æ', 'ð', 'ŋ', 'ɔ', 'ʃ',
    'θ', 'ʊ', 'ʒ', 'aɪ', 'aʊ', 'j', 'ɔɪ', 'a', 'ɛ', 'ɝ', 'ɪ',
    # 'SIL' is used as a word separator, 'UNK' for unknown phonemes.
    'SIL', 'UNK'
])))

# Create phoneme to index mapping
PHONE_TO_ID = {phone: i for i, phone in enumerate(IPA_PHONEMES)}
ID_TO_PHONE = {i: phone for phone, i in PHONE_TO_ID.items()}

def get_num_phones():
    """Return the number of phonemes in the vocabulary."""
    return len(IPA_PHONEMES)

def text_to_phones(text: str) -> List[str]:
    """
    Convert a string of text to a sequence of IPA phonemes.
    """
    # Use phonemizer with espeak-ng backend for robust conversion.
    # - language: American English
    # - separator: Use spaces for phonemes and 'SIL' for words.
    # - strip: Remove surrounding whitespace and punctuation.
    # - with_stress: Disable stress markers for simplicity.
    phoneme_str = phonemize(
        text.strip(),
        language='en-us',
        backend='espeak',
        separator=Separator(phone=' ', word=' SIL '),
        strip=True,
        with_stress=False
    )

    # Handle empty or invalid input
    if not phoneme_str:
        return []

    # Split the phoneme string into a list of phoneme tokens.
    # e.g., "h ə l oʊ SIL w ɝ l d" -> ['h', 'ə', 'l', 'oʊ', 'SIL', 'w', 'ɝ', 'l', 'd']
    phonemes = cast(str, phoneme_str).split(' ')
    return [p for p in phonemes if p]

def phones_to_ids(phones: List[str]) -> List[int]:
    """Convert a sequence of phoneme strings to integer IDs."""
    # Use .get() to default to the UNK token's ID if a phoneme is not in our vocab
    return [PHONE_TO_ID.get(p, PHONE_TO_ID['UNK']) for p in phones]

def ids_to_phones(ids: List[int]) -> List[str]:
    """Convert a sequence of integer IDs back to phoneme strings."""
    return [ID_TO_PHONE.get(i, 'UNK') for i in ids] 